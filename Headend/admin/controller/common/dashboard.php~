<?php
class ControllerCommonDashboard extends Controller 
{
	public function index()
	{
		$this->load->language('common/dashboard');

		$this->document->setTitle($this->language->get('heading_title'));

		$data['heading_title'] = $this->language->get('heading_title');

		$data['text_sale'] = $this->language->get('text_sale');
		$data['text_map'] = $this->language->get('text_map');
		$data['text_activity'] = $this->language->get('text_activity');
		$data['text_recent'] = $this->language->get('text_recent');

		$data['breadcrumbs'] = array();

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_home'),
			'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
		);

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('heading_title'),
			'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
		);

		// Check install directory exists
		if (is_dir(dirname(DIR_APPLICATION) . '/install')) 
		{
			$data['error_install'] = $this->language->get('error_install');
		} else {
			$data['error_install'] = '';
		}
		$data['api_list']=array();
		
		$restapi_object = new restapi();
		$hdr = array('Content-Type: application/x-www-form-urlencoded');
		$hardware_version_url = "http://".RMX_IP."/getHardwareVersion"; 
		$hardware_version_response = $restapi_object->callAPI("GET",$hdr, $hardware_version_url,$data1=array());
		
		$data['min_ver']='';
		$hardwareVersion_decode = json_decode($hardware_version_response,true);
		if($hardware_version_response == false || $hardwareVersion_decode['error'] ==true)
		{

		}
		else
		{
			$data['min_ver'] = $hardwareVersion_decode['min_ver'];
			$data['maj_ver'] = $hardwareVersion_decode['maj_ver'];
			$data['hardware_input'] = $hardwareVersion_decode['input'];
			$data['hardware_output'] = $hardwareVersion_decode['output'];
		}
		//getactivated Channels


		//get Service Id
		/*$this->load->model('common/dashboardchannels');
		$rmx_no = $this->model_common_dashboardchannels->rmx_no();
        $rmx_no=$rmx_no+1;
		
		$get_ActivatedChannels="http://".RMX_IP."/getProgActivation/".$rmx_no;
        $Activated_channels_response = $restapi_object->callAPI("GET",$hdr, $get_ActivatedChannels,$data1=array());
        $Activated_channels_decode = json_decode($Activated_channels_response,true);  
        $data['active_ch']=array();
        
          

		$get_serviceId="http://".RMX_IP."/getServiceID/".$rmx_no;
        $get_service_response = $restapi_object->callAPI("GET",$hdr, $get_serviceId,$data1=array());
        $get_service_decode = json_decode($get_service_response,true);
        $data['service_id']=array();
        $b=0;

        $data['changed_service_ID']=$get_service_decode['newProgNumber'];
        $data['org_service_ID']=$get_service_decode['oldProgNumber'];*/

   // var_dump($data['active_ch']);exit(0);
     
       //get Service Id
       //getactivated Channels
		
		$this->load->model('common/dashboardchannels');
		$outputchanneldata = $this->model_common_dashboardchannels->getOutputActivatedChannels(); 
		$j = 0;
		$data['outputdata']=array();
		foreach ($outputchanneldata as $outputdata) 
		{
			$changed_ch_number = -1;
			$changed_ch_name = '-1';
			$Enable_ch_name = 0;
			$changed_ch_provider = '-1';
			$Enable_ch_provider = 0;
			if($outputdata['changed_ch_number']!= -1)
			{

				$changed_ch_number = $outputdata['changed_ch_number'];
			}

			if($outputdata['changed_ch_name'] != '-1')
			{
				$changed_ch_name = $outputdata['changed_ch_name'];
			}
			if($outputdata['Enable_ch_name'] != 0)
			{
				$Enable_ch_name = $outputdata['Enable_ch_name'];
			}
			if($outputdata['changed_ch_provider'] != '-1')
			{
				$changed_ch_provider = $outputdata['changed_ch_provider'];
			}
			if($outputdata['Enable_ch_provider'] != 0)
			{
				$Enable_ch_provider = $outputdata['Enable_ch_provider'];
			}
		
		    $data['outputdata'][$j]=array('rmx_no'=>$outputdata['rmx_no'],'channelname'=>$outputdata['output_channelname'],'channelnumber'=>$outputdata['channelnumber'],'qam_targetid'=>$outputdata['qam_targetid'],'targetid'=>$outputdata['targetid'],'inputid'=>$outputdata['inputid'],'changed_ch_no'=>$changed_ch_number,'changed_ch_name'=>$changed_ch_name,'Enable_ch_name'=>$Enable_ch_name,'changed_ch_provider'=>$changed_ch_provider,'Enable_ch_provider'=>$Enable_ch_provider);
			$j++;
		}

		$this->load->model('common/dashboardchannels');
		$ecmg_channel_data= $this->model_common_dashboardchannels->getECMGChannel(); //to get the ECMG channel data from local database

		$data['ecmg_channel']=array();
		$m=0;
		foreach ($ecmg_channel_data as $ecmgdata) 
		{
		    $data['ecmg_channel'][$m]=array('ecmg_channel_id'=>$ecmgdata['ecmg_channel_id'],'Alias'=>$ecmgdata['Alias'],'Ip_Address'=>$ecmgdata['Ip_Address'],'Port'=>$ecmgdata['Port'],'Super_CAS_Id'=>$ecmgdata['Super_CAS_Id']);
			$m++;
		}

		$this->load->model('common/dashboardchannels');
		$emmg_channel_data= $this->model_common_dashboardchannels->getEMMGChannel(); //to get the ECMG channel data from local database

		$data['emmg_channel']=array();
		$n=0;
		foreach ($emmg_channel_data as $emmgdata) 
		{
		    $data['emmg_channel'][$n]=array('channel_id'=>$emmgdata['channel_id'],'alias'=>$emmgdata['alias'],'client_id'=>$emmgdata['client_id'],'data_id'=>$emmgdata['data_id'],'bandwidth'=>$emmgdata['bandwidth'],'port'=>$emmgdata['port'],'stream_id'=>$emmgdata['stream_id']);
			$n++;
		}
		$this->load->model('common/dashboardchannels');
		$ECMStream= $this->model_common_dashboardchannels->getECMStream();
		
		$data['ecm_stream']=array();
		$s=0;
		foreach ($ECMStream as $ecm_stream_data) 
		{
		    $data['ecm_stream'][$s]=array('alias'=>$ecm_stream_data['ecm_stream_alias'],'access_criteria'=>$ecm_stream_data['ecm_stream_access_criteria'],'ecm_stream_ecmId'=>$ecm_stream_data['ecm_stream_ecmid'],'ecm_stream_CW_group'=>$ecm_stream_data['ecm_stream_CW_group'],'ecm_stream_streamid'=>$ecm_stream_data['ecm_stream_streamid'],'ecm_stream_CP_number'=>$ecm_stream_data['ecm_stream_CP_number'],'ecmg_id'=>$ecm_stream_data['ecmg_id']);
			$s++;
		}
		 //selection_Information
        $this->load->model('common/dashboardchannels');
		$Selection_info= $this->model_common_dashboardchannels->get_Selection();
		$data['Selection_detail']=array();
		$s=0;
		
		$ip_input_data= $this->model_common_dashboardchannels->get_RE();
		$data['ip_input']=array(array());
		$data['ip_channels'] = array();
		$no_of_input= $this->model_common_dashboardchannels->rmx_config();
		foreach ($Selection_info as $Selection_info_data) 
		{
		    $data['Selection_detail'][$s]=array('Selection_Id'=>$Selection_info_data['Selection_Id'],'Selection_name'=>$Selection_info_data['Selection_name']);
			

		//selection_Information
		//RE_channels
		
		$p=0;
		//$data['channels']=array();
		foreach ($ip_input_data as $ip_data) 
		{
			$k=0;
		   $data['ip_input'][$s][$p]=array('RE_name'=>$ip_data['RE_name'],'Id'=>$ip_data['Id'],'RE_UniqueID'=>$ip_data['RE_UniqueID']);

	
				$channelNumbers_url = "http://".RMX_IP."/getProgramList";     //to get list of channel numbers
				$hdr = array('Content-Type: application/x-www-form-urlencoded');
				
				$input_value=$ip_data['Id']%$no_of_input;
				
				$rmx_no = (floor($ip_data['Id']/$no_of_input)+1)+($s*2);
				
				$program_list_data="input=".$input_value."&rmx_no=".$rmx_no;

				$channelNumbers_response = $restapi_object->callAPI("POST",$hdr,$channelNumbers_url ,$program_list_data);
				$channelNumbers_decoded = json_decode($channelNumbers_response,true);

				if ($channelNumbers_response == false || $channelNumbers_decoded['error'] == true ) 
				{
				   
				}
				else
				{              //decoded channel numbers data
					$i=0;
					
					if(sizeof($channelNumbers_decoded ['progNums']))
					{

						foreach ($channelNumbers_decoded ['progNums'] as $name) 
						{ 	
							
							$url_channel = "http://".RMX_IP."/getProgramOriginalName";   //to get channel names 
							$program_name_data="input=".$input_value."&rmx_no=".$rmx_no."&output=".$input_value."&progNumber=".$name;
							$channelname_resp = $restapi_object->callAPI("POST",$hdr,$url_channel,$program_name_data);
							$channel_decoded = json_decode($channelname_resp,true);
							if($channelname_resp == false)
							{

							}
							else
							{
						
							$data['ip_channels'][$i]=array( "channelnumber"=>$name,"channelname"=>$channel_decoded['name']);
							$data['api_list'][$k][$i]=array( "channelnumber"=>$name,"channelname"=>$channel_decoded['name']);
							}
							$i++;
						}
						
						$data['ip_input'][$s][$p]['channels'] = $data['ip_channels'];
						$p++;
		   				$k++;
					}
					else
					{
						$data['ip_input'][$s][$p]['channels'] = array();
						$p++;
		   				$k++;
					}	
				}
		    // }
		}
		$s++;
		}
		//RE_channels
		
       // QAM
        $this->load->model('common/dashboardchannels');
		$Qam_info= $this->model_common_dashboardchannels->Qam();
		$data['Qam_detail']=array();
		$s=0;
		foreach ($Qam_info as $Qam_info_data) 
		{
		    $data['Qam_detail'][$s]=array('Qam_ID'=>$Qam_info_data['Qam_ID'],'Qam_name'=>$Qam_info_data['Qam_name'],'Ifreq'=>$Qam_info_data['Ifreq']);
			$s++;
		}
		//QAM
		//QAM_FREQ
        $this->load->model('common/dashboardchannels');
		$QamFreq_info= $this->model_common_dashboardchannels->Qam_freq();
		$data['QamFreq_detail']=array();
		$s=0;
		foreach ($QamFreq_info as $QamFreq_info_data) 
		{
		    $data['QamFreq_detail'][$s]=array('freq_ID'=>$QamFreq_info_data['freq_ID'],'freq_name'=>$QamFreq_info_data['freq_name'],'qam_id'=>$QamFreq_info_data['qam_id'],'frequency'=>$QamFreq_info_data['frequency']);
			$s++;
		}
		      
		  // $this->addECMStream();

       

		$data['no_of_output']= $this->model_common_dashboardchannels->output_selection();
		$data['RMX_ip'] = RMX_IP;
		$data['token'] = $this->session->data['token'];
		$data['header'] = $this->load->controller('common/header');
		$data['column_left'] = $this->load->controller('common/column_left');
		$data['order'] = $this->load->controller('dashboard/order');
		$data['sale'] = $this->load->controller('dashboard/sale');
		$data['customer'] = $this->load->controller('dashboard/customer');
		$data['online'] = $this->load->controller('dashboard/online');
		$data['map'] = $this->load->controller('dashboard/map');
		$data['chart'] = $this->load->controller('dashboard/chart');
		$data['activity'] = $this->load->controller('dashboard/activity');
		$data['recent'] = $this->load->controller('dashboard/recent');
		$data['footer'] = $this->load->controller('common/footer');
		$data['no_of_input']=$no_of_input;
		if ($this->config->get('config_currency_auto')) 
		{
			$this->load->model('localisation/currency');
			$this->model_localisation_currency->refresh();
		}
		$this->response->setOutput($this->load->view('common/dashboard.tpl', $data));
	}
	function getChannelInformation()
	{
		$req_data = array();
		$restapi_object = new restapi();
		$channelNumber = $this->request->get['channel_number'];
		$input = $this->request->get['input_id'];
		$rmx_no = $this->request->get['rmx_no'];

        $this->load->model('common/dashboardchannels');
		
				$ECMStream= $this->model_common_dashboardchannels->getECMStream();
				$stream=array();
				$s=0;
				foreach ($ECMStream as $ecm_stream_data) 
				{
				    $stream[$s]=array('alias'=>$ecm_stream_data['ecm_stream_alias'],'ecm_stream_ecmId'=>$ecm_stream_data['ecm_stream_ecmid'],'ecmg_id'=>$ecm_stream_data['ecmg_id']);
					$s++;
				}
                 
				$ecmg_channel_data= $this->model_common_dashboardchannels->getECMGChannel(); 
				$ecmg_channel=array();
				$m=0;
				foreach ($ecmg_channel_data as $ecmgdata) 
				{
				    $ecmg_channel[$m]=array('ecmg_channel_id'=>$ecmgdata['ecmg_channel_id'],'Alias'=>$ecmgdata['Alias']);
					$m++;
				}
				//high priority
					$high_priority_data= $this->model_common_dashboardchannels->get_high_priority($channelNumber,$input); 
					$high_priority=array();
					$m=0;
					foreach ($high_priority_data as $prioritydata) 
					{
					    $high_priority[$m]=array('Priority_checkbox'=>$prioritydata['Priority_checkbox']);
						$m++;
					}
				//high priority
				//pmt alarm
                $pmt_alarm_data= $this->model_common_dashboardchannels->get_pmt_alarm($channelNumber,$input); 
				$pmt_alarm=array();
				$m=0;
				foreach ($pmt_alarm_data as $alarmdata) 
				{
				    $pmt_alarm[$m]=array('alarm_enable'=>$alarmdata['alarm_enable']);
					$m++;
				}
				// //pmt alarm
				// //get pmt alarm
		  //           $PMT_alarm_url = "http://".RMX_IP."/getPmtAlarm";     //to get list of channel numbers
			 //        $hdr = array('Content-Type: application/x-www-form-urlencoded');
				// 	$PMT_alarm_response = $restapi_object->callAPI("GET",$hdr,$PMT_alarm_url,$data1=array());
				// 	$PMT_alarm_decoded = json_decode($PMT_alarm_response,true);

				// 	if($PMT_alarm_response == false || $PMT_alarm_decoded['error'] == true)
				// 	{
		  //             $this->response->setOutput(-1);
				// 	}
			  //get pmt alarm
				$hdr = array('Content-Type: application/x-www-form-urlencoded');
				$url_ch_detail = "http://".RMX_IP."/getChannelDetails";        //to get channel information
				$input_para="input=".$input."&output=".$input."&rmx_no=".$rmx_no."&progNumber=".$channelNumber;
				$ch_detail_resp = $restapi_object->callAPI("POST",$hdr,$url_ch_detail,$input_para);
				$ch_detail_decoded = json_decode($ch_detail_resp,true);
				$input_rate="";
				// if($dataflowrate_decoded["error"]==false){
				// 	$input_rate =$dataflowrate_decoded["uInuputRate"];
				// }else{
				// 	$input_rate=0;
				// }
				// $channelinfo_decoded = json_decode($channelinfo_resp,true);
                     
                   // var_dump($input_para);  
				if($ch_detail_decoded["error"]==false){
					$input_rate =(isset($ch_detail_decoded["uInuputRate"])?$ch_detail_decoded["uInuputRate"]:"");
					$k=0;
					$video_pos=-1;
					$audio_pos=-1;
					foreach ($ch_detail_decoded["type"] as $value) {
						if($value==27){
							$video_pos=$k;
						}elseif ($value==3 || $value==4) {
							$audio_pos=$k;
						}
						$k++;
					}
					$video_pid = ($video_pos != -1) ? $ch_detail_decoded['type'][$video_pos]:" ";
					$audio_pid = ($audio_pos != -1) ? $ch_detail_decoded['type'][$audio_pos]:" ";

					$video_band = ($video_pos != -1) ?$ch_detail_decoded['band'][$video_pos]:0;
					$audio_band = ($audio_pos != -1) ?$ch_detail_decoded['band'][$audio_pos]:0;

					$video_pids = ($video_pos != -1) ?$ch_detail_decoded['PIDS'][$video_pos]:"";
					$audio_pids = ($audio_pos != -1) ?$ch_detail_decoded['PIDS'][$audio_pos]:"";

					$channel_data = array('serviceprovider'=>$ch_detail_decoded['original_provider_name'],'servicetype'=>'Digital Telivision Services','PMTpid'=>$ch_detail_decoded['PIDS'][1],'PCRpid'=>$ch_detail_decoded['PIDS'][0],'audiopid'=>$audio_pid,'videopid'=>$video_pid,"input_rate"=>$input_rate,'video_per'=>$video_band,'audio_per'=>$audio_band,'audiopid_no'=>$audio_pids,'videopid_no'=>$video_pids,'Affected_input'=>$ch_detail_decoded['affected_input']);
					
				}
                    
				$channel_data['ecmg_channel'] = $ecmg_channel;
				$channel_data['stream'] = $stream;
                $channel_data['pmt_alarm'] = $pmt_alarm_data;
                $channel_data['high_priority'] = $high_priority;
               
   					
				$channel_json_arr=json_encode($channel_data);
				
				$this->response->setOutput($channel_json_arr);
		 	
	}
	function addToOutput()                 
	{	
		$channelNumber = $this->request->get['channelNumber'];
		$qam_targetid = $this->request->get['outputQAMid'];
		$target_id = $this->request->get['outputfreqId'];
		$re_value = $this->request->get['re_value'];
		$input = $this->request->get['input'];
		$output_channelName = $this->request->get['channelname'];
		$includeFlag = $this->request->get['includeFlag'];

		$this->load->model('common/dashboardchannels');
		$no_of_input= $this->model_common_dashboardchannels->rmx_config();
        $rmx_no=floor(($re_value/$no_of_input))+1;
        $input = $input%$no_of_input;
	

			$url_channel = "http://".RMX_IP."/setKeepProg"; 
			$hdr = array('Content-Type: application/x-www-form-urlencoded');
			$data="programNumber=".$channelNumber."&input=".$input."&output=".$qam_targetid."&includeFlag=".$includeFlag."&rmx_no=".$rmx_no;
			$restapi_object = new restapi();
			$resp=1;
			$channleActivation_resp = $restapi_object->callAPI("POST",$hdr,$url_channel,$data);
			$channelActivation_decoded = json_decode($channleActivation_resp,true);
			
			if($channelActivation_decoded['error']==false)
			{

			 $this->model_common_dashboardchannels->addOutputChannels($qam_targetid,$target_id,$channelNumber,$input,$output_channelName,$rmx_no);
			 $resp =1;
			}
			else
			{
				$resp = 0;
			}
		
		$this->response->setOutput($resp);
	}

	function deleteChannel()           //to delete channel from output
	{
		$ch_number = $this->request->get['ch_number'];
		$target_id = $this->request->get['target_id'];
		$inputid = $this->request->get['inputid'];
		$rmx_no = $this->request->get['rmx_no'];
		$includeFlag = $this->request->get['includeFlag'];
        $qam_id=$rmx_no-1;
		$this->load->model('common/dashboardchannels');
		$this->model_common_dashboardchannels->deleteChannel($ch_number,$target_id,$inputid);

			$this->load->model('common/dashboardchannels');
			$outputchanneldata = $this->model_common_dashboardchannels->getOutputChannels($inputid,$target_id,$qam_id);
			$j = 0;
			$k=0;
			$this->load->model('common/dashboardchannels');
			$output_channel_data = $this->model_common_dashboardchannels->getOutputActivatedChannels();
			$outputchannels_after_delete=array();

			foreach ($output_channel_data as $outputdata1) 
			{
				    $outputchannels_after_delete[$k]=''.$outputdata1['channelnumber'].'';
					$k++;
			}

			$output_channel_json_arr=json_encode($outputchannels_after_delete);
			$outputchannels=array();
			foreach ($outputchanneldata as $outputdata) 
			{
				    $outputchannels[$j]=''.$outputdata['channelnumber'].'';
					$j++;
			}
			
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
            $restapi_object = new restapi();
		 	$url_channel = "http://".RMX_IP."/setKeepProg";
            $data1="input=".$inputid."&output=".$target_id."&rmx_no=".$rmx_no."&includeFlag=".$includeFlag."&programNumber=".$ch_number;
            $Delete_ch_resp = $restapi_object->callAPI("POST",$hdr,$url_channel,$data1);
            $Delete_ch_decoded = json_decode($Delete_ch_resp,true);
             if($Delete_ch_resp == false || $Delete_ch_decoded['error'] == true)
			 	{
			 		
			 	}
		 	else
		 	{
		 		$this->response->setOutput($output_channel_json_arr);
		 	}
		 	
		
	} 
	function addECMGChannel()             //to add ECMG channel in localdatabase and in REMUX
	{
		$resp = 0;
		$ip_Address = $this->request->get['ip_Address'];
		$port = $this->request->get['port'];
		$super_CAS_Id = $this->request->get['super_CAS_Id'];
		$ecmg_Channel_Id = $this->request->get['ecmg_Channel_Id'];
		$Alias = $this->request->get['Alias'];
		$Enable = $this->request->get['Enable'];
		$Cryptoperiod = $this->request->get['Cryptoperiod'];

		$url_addECMG = "http://".RMX_IP."/addECMChannelSetup";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$ecmg_data="channel_id=".$ecmg_Channel_Id."&supercas_id=".$super_CAS_Id."&ip=".$ip_Address."&port=".$port;
	 	$restapi_object = new restapi();
	 	$ecmg_resp = $restapi_object->callAPI("POST",$hdr,$url_addECMG,$ecmg_data);
	 	$ecmg_resp_decoded = json_decode($ecmg_resp,true);
	 	if($ecmg_resp == false || $ecmg_resp_decoded['error'] == true)
	 	{
	 		$resp = 0;
	 	}
	 	else
	 	{
	 		$this->load->model('common/dashboardchannels');
			$result = $this->model_common_dashboardchannels->addECMGChannel($ecmg_Channel_Id,$Alias,$Enable,$ip_Address,$port,$super_CAS_Id,$Cryptoperiod); 
			$resp = $result;
	 	}
		
	 	$this->response->setOutput($resp);
	 	
	}
	function addEMMGChannel()             //to add ECMG channel in localdatabase and in REMUX
	{
		$emm_alias = $this->request->get['emm_alias'];
		$emm_bw = $this->request->get['emm_bw'];
		$emm_channelid = $this->request->get['emm_channelid'];
		$emm_streamid = $this->request->get['emm_streamid'];
		$emm_clientid = $this->request->get['emm_clientid'];
		$emm_port = $this->request->get['emm_port'];
		$emm_dataid = $this->request->get['emm_dataid'];
		$emm_enable = $this->request->get['emm_enable'];

		$url_addEMMG = "http://".RMX_IP."/addEmmgSetup";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$emmg_data="channel_id=".$emm_channelid."&client_id=".$emm_clientid."&data_id=".$emm_dataid."&bw=".$emm_bw."&port=".$emm_port."&stream_id=".$emm_streamid;
	 	$restapi_object = new restapi();
	 	$emmg_resp = $restapi_object->callAPI("POST",$hdr,$url_addEMMG,$emmg_data);
	 	$emmg_resp_decoded = json_decode($emmg_resp,true);
	 	if($emmg_resp == false || $emmg_resp_decoded['error'] == true)
	 	{
	 		$resp = 0;
	 		$this->response->setOutput($resp);
	 	}
	 	else
	 	{
	 		$this->load->model('common/dashboardchannels');
			$this->model_common_dashboardchannels->addEMMGChannel($emm_alias,$emm_bw,$emm_channelid,$emm_streamid,$emm_clientid,$emm_port,$emm_dataid,$emm_enable);
			$resp = 1;
	 		$this->response->setOutput($resp);
	 	}
	}
	function addBaseFrequency()
	{
		$base_freq = $this->request->get['basefrequency'];
		$rmx_no = $this->request->get['Qam_ID'];
		$Qam_ID = $this->request->get['Qam_ID'];
		$rmx_no=$rmx_no+1;
		
		$basefrequency_url = "http://".RMX_IP."/setIfrequency";      
		$hdr = array('Content-Type: application/x-www-form-urlencoded');
		$data_freq ="frequency=".$base_freq."&rmx_no=".$rmx_no;
		$restapi_object = new restapi();
		$basefrequency_resp = $restapi_object->callAPI("POST",$hdr,$basefrequency_url,$data_freq);
		$basefrequency_resp_decoded = json_decode($basefrequency_resp,true);

		if($basefrequency_resp ==  false || $basefrequency_resp_decoded['error']==true)
		{
			$this->response->setOutput(0);
		}
		else
		{
			$this->load->model('common/dashboardchannels');
			$output_channel_data = $this->model_common_dashboardchannels->QamFreqUpdate($base_freq,$Qam_ID);
			$this->response->setOutput(1);
         
		}
		
	}

	function getActivatedChannels()
	{
		$this->load->model('common/dashboardchannels');
			$output_channel_data = $this->model_common_dashboardchannels->getOutputActivatedChannels();
		$outputchannels_after_delete=array();
		$j=0;
		foreach ($output_channel_data as $outputdata) 
		{
			    $outputchannels_after_delete[$j]=array('channelname'=>$outputdata['output_channelname'],'channelnumber'=>$outputdata['channelnumber'],'qam_targetid'=>$outputdata['qam_targetid'],'targetid'=>$outputdata['targetid'],'inputid'=>$outputdata['inputid']);
				$j++;
		}
		$output_channel_json_arr=json_encode($outputchannels_after_delete);
		$this->response->setOutput($output_channel_json_arr);
	}
	function storeIPInput()
	{
		$alias = $this->request->get['ge1_alias'];
		$port = $this->request->get['ge1_port'];
		$payload_interface = $this->request->get['payload_interface'];
		$ip = $this->request->get['ge1_ip'];

		$this->load->model('common/dashboardchannels');
		$res = $this->model_common_dashboardchannels->storeIpInput($alias,$ip,$port,$payload_interface);
		$this->response->setOutput($res);
	}
	function addECMStream()
	{
		$resp = 0;
		$ecm_stream_alias = $this->request->get['ecm_stream_alias'];
		$ecm_stream_access_criteria = $this->request->get['ecm_stream_access_criteria'];
		$ecm_stream_ecmId = $this->request->get['ecm_stream_ecmId'];
		$ecm_stream_CW_group = $this->request->get['ecm_stream_CW_group'];
		$ecm_stream_CP_number = $this->request->get['ecm_stream_CP_number'];
		$ecm_stream_streamid = $this->request->get['ecm_stream_streamid'];
		$ecmg_channel_id = $this->request->get['ecmg_id'];
	    $id=$this->request->get['ecmg_id'];
	    
		$this->load->model('common/dashboardchannels');
		$result = $this->model_common_dashboardchannels->checkECMID_Duplicate($ecmg_channel_id,$ecm_stream_ecmId);
		
		if(sizeof($result)>0)
		{
			$resp = -1;
			
			$this->response->setOutput($resp);
		}
		else
		{

			$url_addECMGStream = "http://".RMX_IP."/addECMStreamSetup";      
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
		 	$ecmg_stream_data="channel_id=".$ecmg_channel_id."&stream_id=".$ecm_stream_streamid."&access_criteria=".$ecm_stream_access_criteria."&cp_number=".$ecm_stream_CP_number."&ecm_id=".$ecm_stream_ecmId;
		 	$restapi_object = new restapi();
		 	$ecmg_stream_resp = $restapi_object->callAPI("POST",$hdr,$url_addECMGStream,$ecmg_stream_data);
		 	$ecmg_stream_resp_decoded = json_decode($ecmg_stream_resp,true);
		 	
		 	if($ecmg_stream_resp == false || $ecmg_stream_resp_decoded['error'] == true)
		 	{
		 		$resp = 0;
		 	}
		 	else
		 	{
				$this->model_common_dashboardchannels->storeECMStream($ecm_stream_streamid,$ecmg_channel_id,$ecm_stream_alias,$ecm_stream_access_criteria,$ecm_stream_ecmId,$ecm_stream_CW_group,$ecm_stream_CP_number,$id);
				$resp = 1;
		 	}
			$this->response->setOutput($resp);
		
		}
		
	}
	function getLastStreamId()
	{
		$ecm_id = $this->request->get['ecm_id'];
		$this->load->model('common/dashboardchannels');
		$streamid= $this->model_common_dashboardchannels->getLastStreamId($ecm_id);
		$this->response->setOutput($streamid);
	}
	function getECMG()
	{
		$channel_id = $this->request->get['channel_id'];
		$this->load->model('common/dashboardchannels');
		$ECMGdata= $this->model_common_dashboardchannels->getECMG($channel_id);
		$ecmg_json_arr=json_encode($ECMGdata);
		$this->response->setOutput($ecmg_json_arr);

	}
	function updateECMGChannel()             //to add ECMG channel in localdatabase and in REMUX
	{
		
		$original_id = $this->request->get['original_id'];
		$ip_Address = $this->request->get['ip_Address'];
		$port = $this->request->get['port'];
		$super_CAS_Id = $this->request->get['super_CAS_Id'];
		$ecmg_Channel_Id = $this->request->get['ecmg_Channel_Id'];
		$Alias = $this->request->get['Alias'];
		$Enable = $this->request->get['Enable'];
		
		if($original_id == $ecmg_Channel_Id)
		{
			$url_addECMG = "http://".RMX_IP."/updateECMChannelSetup";      
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
		 	$ecmg_data="channel_id=".$ecmg_Channel_Id."&supercas_id=".$super_CAS_Id."&ip=".$ip_Address."&port=".$port."&old_channel_id=".$original_id;
		 	$restapi_object = new restapi();
		 	$ecmg_resp = $restapi_object->callAPI("POST",$hdr,$url_addECMG,$ecmg_data);
		 	$ecmg_resp_decoded = json_decode($ecmg_resp,true);
		 	if($ecmg_resp == true || $ecmg_resp_decoded['error'] == false)
		 	{
		 		$this->load->model('common/dashboardchannels');
		 		$this->model_common_dashboardchannels->updateECMGChannel($ecmg_Channel_Id,$Alias,$Enable,$ip_Address,$port,$super_CAS_Id,$original_id);
		 		$this->response->setOutput(1);
		 	}
		 	else if($ecmg_resp == false || $ecmg_resp_decoded['error'] == true)
		 	{
		 		
		 		$this->response->setOutput(0);
		 	}
		}
		else
		{
			$this->load->model('common/dashboardchannels');
			$result = $this->model_common_dashboardchannels->checkValidECMG($ecmg_Channel_Id);
			if(sizeof($result)>0)
			{
				$this->response->setOutput(0);
			}
			else
			{
				$url_addECMG = "http://".RMX_IP."/updateECMChannelSetup";      
			 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
			 	$ecmg_data="channel_id=".$ecmg_Channel_Id."&supercas_id=".$super_CAS_Id."&ip=".$ip_Address."&port=".$port."&old_channel_id=".$original_id;
			 	$restapi_object = new restapi();
			 	$ecmg_resp = $restapi_object->callAPI("POST",$hdr,$url_addECMG,$ecmg_data);
			 	$ecmg_resp_decoded = json_decode($ecmg_resp,true);
		 		if($ecmg_resp == false || $ecmg_resp_decoded['error'] == true)
			 	{
			 		$this->response->setOutput(0);
			 	}
			 	else
			 	{
			 		$this->model_common_dashboardchannels->updateECMGChannel($ecmg_Channel_Id,$Alias,$Enable,$ip_Address,$port,$super_CAS_Id,$original_id);
			 		$this->response->setOutput(1);
			 	}
			}
		}
	}

	function getLastECMGId()
	{
		$this->load->model('common/dashboardchannels');
		$ECMG= $this->model_common_dashboardchannels->getECMGChannel();
		$ECMG_id = array();
		$id = array();
		$val = sizeof($ECMG);
		$id = array($val);
		$ECMG_id = array('id'=>0);
		foreach ($ECMG as $ecmg_id) 
		{
			    $ECMG_id = array('id'=>$ecmg_id['ecmg_channel_id']);			
		}
		array_push($ECMG_id,$val);
		$json_arr=json_encode($ECMG_id);
		$this->response->setOutput($json_arr);
	}
	function getECMStreamData()
	{
		
		$stream_id = $this->request->get['stream_id'];
		$channel_id = $this->request->get['channel_id'];

		$this->load->model('common/dashboardchannels');
		$ECMGStream= $this->model_common_dashboardchannels->getStreamData($stream_id,$channel_id);
		$ecmg_stream_json_arr=json_encode($ECMGStream);
		$this->response->setOutput($ecmg_stream_json_arr);
	}

	function updateECMStream()             //to add ECMG channel in localdatabase and in REMUX
	{
		$resp = 0;
		$ecm_stream_alias = $this->request->get['ecm_stream_alias'];
		$ecm_stream_access_criteria = $this->request->get['ecm_stream_access_criteria'];
		$ecm_stream_ecmId = $this->request->get['ecm_stream_ecmId'];
		$ecm_stream_CW_group = $this->request->get['ecm_stream_CW_group'];
		$ecm_stream_CP_number = $this->request->get['ecm_stream_CP_number'];

		$original_streamid = $this->request->get['original_streamid'];
		$original_ecmg_id = $this->request->get['original_ecmg_id'];
		$old_ecmid = $this->request->get['old_ecmid'];

		if($old_ecmid == $ecm_stream_ecmId)
		{
			$url_addECMGStream = "http://".RMX_IP."/addECMStreamSetup";      
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
		 	$ecmg_stream_data="channel_id=".$original_ecmg_id."&stream_id=".$original_streamid."&access_criteria=".$ecm_stream_access_criteria."&cp_number=".$ecm_stream_CP_number."&ecm_id=".$ecm_stream_ecmId;
		 	$restapi_object = new restapi();
		 	$ecmg_stream_resp = $restapi_object->callAPI("POST",$hdr,$url_addECMGStream,$ecmg_stream_data);
		 	$ecmg_stream_resp_decoded = json_decode($ecmg_stream_resp,true);

			if($ecmg_stream_resp == false || $ecmg_stream_resp_decoded['error'] == true)
		 	{
		 		$resp = 0;
		 		$this->response->setOutput($resp);
		 	}
		 	else
		 	{
		 		
				$this->load->model('common/dashboardchannels');
				$ECMStream = $this->model_common_dashboardchannels->updateECMStream($ecm_stream_alias,$ecm_stream_access_criteria,$ecm_stream_ecmId,$ecm_stream_CW_group,$ecm_stream_CP_number,$original_streamid,$original_ecmg_id);
				$ecm_stream_json_arr=json_encode($ECMStream);
				$resp = 1;
				$this->response->setOutput($resp);
		 	}
			
		}
		else
		{
			$this->load->model('common/dashboardchannels');
			$res = $this->model_common_dashboardchannels->checkECMID_Duplicate($original_ecmg_id,$ecm_stream_ecmId);
		
			if(sizeof($res)>0)
			{
				$resp = -1;
				$this->response->setOutput($resp);
			}
			else
			{
				$url_addECMGStream = "http://".RMX_IP."/addECMStreamSetup";      
			 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
			 	$ecmg_stream_data="channel_id=".$original_ecmg_id."&stream_id=".$original_streamid."&access_criteria=".$ecm_stream_access_criteria."&cp_number=".$ecm_stream_CP_number."&ecm_id=".$ecm_stream_ecmId;

			 	$restapi_object = new restapi();
			 	$ecmg_stream_resp = $restapi_object->callAPI("POST",$hdr,$url_addECMGStream,$ecmg_stream_data);
			 	$ecmg_stream_resp_decoded = json_decode($ecmg_stream_resp,true);

				if($ecmg_stream_resp == false || $ecmg_stream_resp_decoded['error'] == true)
			 	{
			 		$resp = 0;
			 		$this->response->setOutput($ecmg_stream_data);
			 	}
			 	else
			 	{
			 		
					$this->load->model('common/dashboardchannels');
					$this->model_common_dashboardchannels->updateECMStream($ecm_stream_alias,$ecm_stream_access_criteria,$ecm_stream_ecmId,$ecm_stream_CW_group,$ecm_stream_CP_number,$original_streamid,$original_ecmg_id);
					
					$resp = 1;
					$this->response->setOutput($resp);
			 	}
			}
			
		}
	}
	function deleteECMG()
	{
		$ecmg_id = $this->request->get['ecmg_id'];
		$url_deleteECMG = "http://".RMX_IP."/deleteECMChannelSetup";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$ecmg_delete_data="channel_id=".$ecmg_id;
	 	$restapi_object = new restapi();
	 	$resp = 1;
	 	$ecmg_delete_resp = $restapi_object->callAPI("POST",$hdr,$url_deleteECMG,$ecmg_delete_data);
	 	$ecmg_delete_resp_decoded = json_decode($ecmg_delete_resp,true);

	 	if($ecmg_delete_resp==false || $ecmg_delete_resp_decoded['error']==true)
	 	{
	 		$resp = 0;
	 	}
	 	else
	 	{
	 		
	 		$this->load->model('common/dashboardchannels');
			$this->model_common_dashboardchannels->deleteECMG($ecmg_id);
	 	}
		$this->response->setOutput($resp);
	}
	function deleteECMStream()
	{

		$resp = 0;
		$ecmg_id = $this->request->get['ecmg_id'];
		$stream_id = $this->request->get['stream_id'];

		$url_deleteECMStream = "http://".RMX_IP."/deleteECMStreamSetup";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$ecmg_stream_delete_data="channel_id=".$ecmg_id."&stream_id=".$stream_id;
	 	$restapi_object = new restapi();
	 	$ecm_stream_delete_resp = $restapi_object->callAPI("POST",$hdr,$url_deleteECMStream,$ecmg_stream_delete_data);
	 	$ecm_stream_delete_resp_decoded = json_decode($ecm_stream_delete_resp,true);

	 	if($ecm_stream_delete_resp == false || $$ecm_stream_delete_resp_decoded['error'] == true)
	 	{
	 		$resp = 0;
	 	}
	 	else
	 	{
	 		$this->load->model('common/dashboardchannels');
			$this->model_common_dashboardchannels->deleteECMStream($ecmg_id,$stream_id);
			$resp = 1;
	 	}
		$this->response->setOutput($resp);
	}
	function getChannelData()
	{
		$port = $this->request->get['port'];
		$this->load->model('common/dashboardchannels');
		$Channeldata = $this->model_common_dashboardchannels->getChannelData($port);

		//high priority
		        $url_channel1 = "http://".RMX_IP."/setInputOutput";      
			 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
			 	$data1="input=".$port."&output=".$port;
			 	$restapi_object = new restapi();
			 	$input_output_resp = $restapi_object->callAPI("POST",$hdr,$url_channel1,$data1);
			 	if($input_output_resp == false)
			 	{
			 		$this->response->setOutput(1);
			 	}
			$get_priority_url = "http://".RMX_IP."/getHighPriorityServices";   
	        $hdr = array('Content-Type: application/x-www-form-urlencoded');
            $restapi_object = new restapi();
			$get_priority_response = $restapi_object->callAPI("GET",$hdr,$get_priority_url,$data1=array());
			$get_priority_decoded = json_decode($get_priority_response,true);
				if($get_priority_response == false || $get_priority_decoded['error'] == true)
				{
                  $this->response->setOutput(1);
				}
				
			
					$Channeldata['priority']=$get_priority_decoded['pProg'];
		//high priority
	      
		$channeldata_json_arr=json_encode($Channeldata);
		$this->response->setOutput($channeldata_json_arr);
	}
	function delete_input()
	{
		$port = $this->request->get['port'];
		$this->load->model('common/dashboardchannels');
		$res = $this->model_common_dashboardchannels->delete_input($port);
		$this->response->setOutput($res);
	}
	function updateInput()
	{
		$alias = $this->request->get['ge1_alias'];
		$port = $this->request->get['ge1_port'];
		$ip = $this->request->get['ge1_ip'];
		$original_port = $this->request->get['original_port'];

		$this->load->model('common/dashboardchannels');
		$resp = $this->model_common_dashboardchannels->updateInput($alias,$ip,$port,$original_port);
		$this->response->setOutput($resp);
	}
	function getECMStreams()
	{
		$this->load->model('common/dashboardchannels');
		$streams = $this->model_common_dashboardchannels->getECMStreamNames();

		$stream_json_arr=json_encode($streams);
		$this->response->setOutput($stream_json_arr);
	}
	function getEMMid()
	{
		$this->load->model('common/dashboardchannels');
		$emmid = $this->model_common_dashboardchannels->getEMMid();
		$this->response->setOutput($emmid);
	}
	function getEMMGData()
	{
		$channel_id = $this->request->get['channel_id'];
		$this->load->model('common/dashboardchannels');
		$emmdata = $this->model_common_dashboardchannels->getEMMGData($channel_id);
		$emm_json_arr=json_encode($emmdata);
		if($emm_json_arr== false)
		{
          $this->response->setOutput(1);
		}
		$this->response->setOutput($emm_json_arr);
	}
	function updateEMMG()
	{
		$emm_alias = $this->request->get['emm_alias'];
		$emm_bw = $this->request->get['emm_bw'];
		$emm_channelid = $this->request->get['emm_channelid'];
		$emm_streamid = $this->request->get['emm_streamid'];
		$emm_clientid = $this->request->get['emm_clientid'];
		$emm_port = $this->request->get['emm_port'];
		$emm_dataid = $this->request->get['emm_dataid'];
		$emm_enable = $this->request->get['emm_enable'];

		$url_updateEMMG = "http://".RMX_IP."/updateEmmgSetup";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$emmg_data="channel_id=".$emm_channelid."&client_id=".$emm_clientid."&data_id=".$emm_dataid."&bw=".$emm_bw."&port=".$emm_port."&stream_id=".$emm_streamid;
	 	$restapi_object = new restapi();
	 	$emmg_resp = $restapi_object->callAPI("POST",$hdr,$url_updateEMMG,$emmg_data);
	 	$emmg_resp_decoded = json_decode($emmg_resp,true);
	 	if($emmg_resp == false || $emmg_resp_decoded['error'] == true)
	 	{
	 		$resp = 0;
	 		$this->response->setOutput($resp);
	 	}
	 	else
	 	{
	 		$this->load->model('common/dashboardchannels');
			$this->model_common_dashboardchannels->updateEMMG($emm_alias,$emm_bw,$emm_channelid,$emm_streamid,$emm_clientid,$emm_port,$emm_dataid,$emm_enable);
			$resp = 1;
	 		$this->response->setOutput($resp);
	 	}
	}
	function deleteEMMG()
	{
		$emm_channelid = $this->request->get['emm_channelid'];
		$url_deleteEMMG = "http://".RMX_IP."/deleteEMMSetup";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$emmg_data="channel_id=".$emm_channelid;
	 	$restapi_object = new restapi();
	 	$emmg_delete_resp = $restapi_object->callAPI("POST",$hdr,$url_deleteEMMG,$emmg_data);
	 	$emmg_delete_resp_decoded = json_decode($emmg_delete_resp,true);
	 	if($emmg_delete_resp == false || $emmg_delete_resp_decoded['error'] == true)
	 	{
	 		$resp = 0;
	 		$this->response->setOutput($resp);
	 	}
	 	else
	 	{
	 		$this->load->model('common/dashboardchannels');
			$this->model_common_dashboardchannels->deleteEMMG($emm_channelid);
			$resp = 1;
	 		$this->response->setOutput($resp);
	 	}
	}
	function GetTables()
	{
		$output = $this->request->get['output'];
		$rmx_no = $this->request->get['rmx_no'];
		$rmx_no=$rmx_no+1;
		$url_table_detail = "http://".RMX_IP."/getTableDetails";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$table_detail_data="input=".$output."&output=".$output."&rmx_no=".$rmx_no;
	 	$restapi_object = new restapi();
	 	$table_detail_resp = $restapi_object->callAPI("POST",$hdr,$url_table_detail,$table_detail_data);
	 	$table_detail_decode = json_decode($table_detail_resp,true);
	 	if($table_detail_resp == false || $table_detail_decode['error'] == true)
			{
	          $this->response->setOutput(-1);
			}
            
       else
       {
	        $this->load->model('common/dashboardchannels');
			$generateData= $this->model_common_dashboardchannels->get_generate_mode($output,$rmx_no);

			foreach ($generateData as $psi_data) 
			{
				
				$ex = array();
				$ex = array('PAT_TEXT'=>$psi_data['Update_PAT'],'CAT_TEXT'=>$psi_data['Update_CAT'],'SDT_TEXT'=>$psi_data['Update_SDT'],'NIT_TEXT'=>$psi_data['Update_NIT']);
			}
			

			
			$json_arr=json_encode(array_merge($ex,array('nit_int'=>$table_detail_decode['nit_int'],'pat_int'=>$table_detail_decode['pat_int'],'sdt_int'=>$table_detail_decode['sdt_int'],'nit_ver'=>$table_detail_decode['nit_ver'],'pat_ver'=>$table_detail_decode['pat_ver'],'sdt_ver'=>$table_detail_decode['sdt_ver'],'nit_isenable'=>$table_detail_decode['nit_isenable'],'pat_isenable'=>$table_detail_decode['pat_isenable'],'sdt_isenable'=>$table_detail_decode['sdt_isenable'])));
       
	        $this->response->setOutput($json_arr);	 
	    }	
	     
	}
	function GetBaseFreq()
	{
		$rmx_no = $this->request->get['rmx_no'];
		$rmx_no=$rmx_no+1;
	    $restapi_object = new restapi();
		$url_BaseFreq = "http://".RMX_IP."/getIfrequency/".$rmx_no;     
		$hdr = array('Content-Type: application/x-www-form-urlencoded');
        $BaseFreq_resp = $restapi_object->callAPI("GET",$hdr,$url_BaseFreq,$data1=array());
	        if($BaseFreq_resp== false)
	        {
	        	$this->response->setOutput(1);
	        }
        $this->response->setOutput($BaseFreq_resp);	
       
	}
	function IRD1data()
	{
		$port1_freq = $this->request->get['port1_freq'];
		$port1_symbol = $this->request->get['port1_symbol'];
		$port1_LNB = $this->request->get['port1_LNB'];
		$port1_Band = $this->request->get['port1_Band'];
		$port1_LowLNB = $this->request->get['port1_LowLNB'];
		$port1_HighLNB = $this->request->get['port1_HighLNB'];
		$port1_Blas = $this->request->get['port1_Blas'];
		$port1_polarization = $this->request->get['port1_polarization'];

		$this->load->model('common/dashboardchannels');
		$this->model_common_dashboardchannels->IRD1data($port1_freq,$port1_symbol,$port1_LNB,$port1_Band,$port1_LowLNB,$port1_HighLNB,$port1_Blas,$port1_polarization); 
	}
	function changeOutputSID()
	{
		
		$Old_OutputSid = $this->request->get['Old_OutputSid'];
		$new_OutputSid = $this->request->get['new_OutputSid'];
		$input = $this->request->get['input'];
		$output = $this->request->get['output'];
		$service_name = $this->request->get['service_name'];
		$Enable1 = $this->request->get['Enable1'];
		$service_provider = $this->request->get['service_provider'];
		$Enable2 = $this->request->get['Enable2'];
		$rmx_no = $this->request->get['rmx_no'];

		$hdr = array('Content-Type: application/x-www-form-urlencoded');
        $restapi_object = new restapi();
        $resp = 0;
		
	 		if($Old_OutputSid!=$new_OutputSid)
	 		{
	 	    $url_channel = "http://".RMX_IP."/setServiceID"; 

	        $oldvalue  = ''.$Old_OutputSid.'';
			$newvalue  = ''.$new_OutputSid.'';

			$data="oldpronum=".$oldvalue ."&newprognum=".$newvalue."&input=".$input."&output=".$output."&rmx_no=".$rmx_no;
			
			$object = new restapi();
			$channleActivation_resp = $restapi_object->callAPI("POST",$hdr,$url_channel,$data);
			$channelActivation_decoded = json_decode($channleActivation_resp,true);

				if($channelActivation_decoded['error'] == false)
				{
						$this->load->model('common/dashboardchannels');
						$this->model_common_dashboardchannels->changeOutputPid($Old_OutputSid,$new_OutputSid,$input,$output); 
						$resp = 1;
				}
				else
				{
					$resp = 0;
				}
		    }
		    else if($Old_OutputSid==$new_OutputSid)
		    {           
		    	        $new_OutputSid=-1;
		    	        $this->load->model('common/dashboardchannels');
						$this->model_common_dashboardchannels->changeOutputPid($Old_OutputSid,$new_OutputSid,$input,$output); 
						$resp = 1;        
		    }
		    if($Enable1==1)
	 		{
		 	    $url_set_service_name = "http://".RMX_IP."/setServiceName"; 

		        $progNAME  = ''.$service_name.'';
				$progNUM   = ''.$Old_OutputSid.'';

				$data_set_service_name="pname=".$progNAME ."&pnumber=".$progNUM."&input=".$input."&rmx_no=".$rmx_no;
				
				$object = new restapi();
				$set_service_name_resp = $restapi_object->callAPI("POST",$hdr,$url_set_service_name,$data_set_service_name);
				$set_service_name_decoded = json_decode($set_service_name_resp,true);

				if($set_service_name_decoded['error'] == false)
				{
						$this->load->model('common/dashboardchannels');
						$this->model_common_dashboardchannels->changechannelname($service_name,$Old_OutputSid,$Enable1,$input,$output); 
						$resp = 1;
				}
				else
				{
					$resp = 0;
				}
		    }
		    else if($Enable1==0)
		    {
    	        $service_name='-1';
                $this->load->model('common/dashboardchannels');
				$this->model_common_dashboardchannels->changechannelname($service_name,$Old_OutputSid,$Enable1,$input,$output);
				$resp = 1;
		    }
		    if($Enable2==1)
	 		{
		 	    $url_set_service_provider = "http://".RMX_IP."/setNewProvName"; 

		        $provNAME  = ''.$service_provider.'';
				$progNUM   = ''.$Old_OutputSid.'';

				$data_set_service_provider="NewName=".$provNAME ."&progNumber=".$progNUM."&input=".$input."&rmx_no=".$rmx_no;
				
				$object = new restapi();
				$set_service_provider_resp = $restapi_object->callAPI("POST",$hdr,$url_set_service_provider,$data_set_service_provider);
				$set_service_provider_decoded = json_decode($set_service_provider_resp,true);

				if($set_service_provider_decoded['error'] == false)
				{
					$this->load->model('common/dashboardchannels');
					$this->model_common_dashboardchannels->changechannelprovider($service_provider,$Old_OutputSid,$Enable2,$input,$output); 
					$resp = 1;
				}
				else
				{
					$resp = 0;
				}
		    }
		    else if($Enable2==0)
		    {
    	        $service_provider='-1';
                $this->load->model('common/dashboardchannels');
				$this->model_common_dashboardchannels->changechannelprovider($service_provider,$Old_OutputSid,$Enable2,$input,$output);
				$resp = 1;
		    }
	 	
	 	$this->response->setOutput($resp);
	}
	function Set_PSISiINT()
	{
	  
	 	$Set_PAT = $this->request->get['Set_PAT'];
		$Set_SDT = $this->request->get['Set_SDT'];
		$Set_NIT = $this->request->get['Set_NIT'];
		$output = $this->request->get['output'];
		$rmx_no = $this->request->get['rmx_no'];
		$rmx_no=$rmx_no+1;
	 	$url_Set_table = "http://".RMX_IP."/setPsiSiInterval";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$data_Set_table="patint=".$Set_PAT."&sdtint=".$Set_SDT."&nitint=".$Set_NIT."&output=".$output."&rmx_no=".$rmx_no;
	 	$restapi_object = new restapi();
	 	$table_set_resp = $restapi_object->callAPI("POST",$hdr,$url_Set_table,$data_Set_table);
		 	if($table_set_resp == false )
		 	{
		 		$resp = 0;
		 	}
		 	else
		 	{
		 		$resp = 1;
		 	}
	 	$this->response->setOutput($resp);
	}
	function get_TSDetails()
	{
		$output = $this->request->get['output'];
        $rmx_no = $this->request->get['rmx_no'];
	    $rmx_no=$rmx_no+1;
	        $url_Set_TSDetail = "http://".RMX_IP."/getTSDetails"; 
	        $hdr = array('Content-Type: application/x-www-form-urlencoded');    
			$data_set_TSDetail="input=".$output."&output=".$output."&rmx_no=".$rmx_no;
			$restapi_object = new restapi();
	        $TSDetail_resp = $restapi_object->callAPI("POST",$hdr,$url_Set_TSDetail,$data_set_TSDetail);
            $TSDetail_data = json_decode($TSDetail_resp,true);

            if($TSDetail_resp == false || $TSDetail_data['error'] == true)
				{
				 $this->response->setOutput(1);	
				}
			
	            $this->load->model('common/dashboardchannels');
				$NITmode= $this->model_common_dashboardchannels->get_NIT_mode();

			    $json_arr=json_encode(array('uTS_Id'=>$TSDetail_data['uTS_Id'],'uNet_Id'=>$TSDetail_data['uNet_Id'],'uOrigNet_Id'=>$TSDetail_data['uOrigNet_Id'],'modes'=>$NITmode,'nit_selected_id'=>$TSDetail_data['NIT_code']));

             $this->response->setOutput($json_arr);
	        
    }
              
	function Set_TS_ID()
	{
	    $Set_TSID = $this->request->get['Set_TSID'];
	    $Set_orgID = $this->request->get['Set_orgID'];
	    $Set_NetworkID = $this->request->get['Set_NetworkID'];
		$output = $this->request->get['output'];
		$rmx_no = $this->request->get['rmx_no'];
        $rmx_no=$rmx_no+1;
	 	$url_Set_TSID = "http://".RMX_IP."/setTsId";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$data_Set_TSID="transportid=".$Set_TSID ."&originalnwid=".$Set_orgID."&networkid=".$Set_NetworkID."&output=".$output."&rmx_no=".$rmx_no;
	 	$restapi_object = new restapi();
	 	$TSID_set_resp = $restapi_object->callAPI("POST",$hdr,$url_Set_TSID,$data_Set_TSID);
	 	$TSID_set_resp_decoded = json_decode($TSID_set_resp ,true);

	 	if($TSID_set_resp == false || $TSID_set_resp_decoded['error'] == true)
	 	{
	 		$resp = 0;
	 	}
	 	else
	 	{
	 		$resp = 1;
	 	}
	 	$this->response->setOutput($resp);	
	}
	function downloadTables()
	{
		$type = $this->request->get['type'];
		$table = $this->request->get['table'];
		$rmx_no = $this->request->get['rmx_no'];
        $rmx_no=$rmx_no+1;
	 	$url_table = "http://".RMX_IP."/downloadTables";      
	 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
	 	$data_table="type=".$type."&table=".$table."&rmx_no=".$rmx_no;
	 	$restapi_object = new restapi();
	 	$resp=0;
	 	$table_resp = $restapi_object->callAPI("POST",$hdr,$url_table,$data_table);

	 	if($table_resp==false)
	 	{
          $resp=-1;
	 	}
	 	$this->response->setOutput($resp);
	}
	
	function generate_mode()
	{
		$PAT_TEXT = $this->request->get['PAT_TEXT'];
		$CAT_TEXT = $this->request->get['CAT_TEXT'];
		$SDT_TEXT = $this->request->get['SDT_TEXT'];
		$NIT_TEXT = $this->request->get['NIT_TEXT'];
        $output = $this->request->get['output'];
        $rmx_no = $this->request->get['rmx_no'];
		$this->load->model('common/dashboardchannels');
		$this->model_common_dashboardchannels->generate_mode($PAT_TEXT,$CAT_TEXT,$SDT_TEXT,$NIT_TEXT,$output,$rmx_no);	

	}
	function set_nit_mode()
	{
	    $output = $this->request->get['output'];
		$nit_mode = $this->request->get['nit_mode'];
		$rmx_no = $this->request->get['rmx_no'];
        $rmx_no = $rmx_no+1;
			$url_NIT = "http://".RMX_IP."/setNITmode";      
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
		 	$data_nit="mode=".$nit_mode."&output=".$output."&rmx_no=".$rmx_no;
		 	$restapi_object = new restapi();
		 	$resp=0;
		 	$nit_resp = $restapi_object->callAPI("POST",$hdr,$url_NIT,$data_nit);
		 	if($nit_resp == false)
	 	      {
	 		    $resp = -1;
	 	      }
	    
	 	    $this->response->setOutput($resp);	

	}
	function set_table_ver()
	{
	    $changed_nit_ver = $this->request->get['changed_nit_ver'];
		$changed_pat_ver = $this->request->get['changed_pat_ver'];
		$changed_sdt_ver = $this->request->get['changed_sdt_ver'];
		$nit_isenable = $this->request->get['nit_isenable'];
		$pat_isenable = $this->request->get['pat_isenable'];
		$sdt_isenable = $this->request->get['sdt_isenable'];
		$output = $this->request->get['output'];
		$rmx_no = $this->request->get['rmx_no'];
        $rmx_no=$rmx_no+1;
		

			$url_table_version = "http://".RMX_IP."/setTablesVersion";      
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
		 	$data_table_version="pat_ver=".$changed_pat_ver."&sdt_ver=".$changed_sdt_ver."&nit_ver=".$changed_nit_ver."&nit_isenable=".$nit_isenable."&pat_isenable=".$pat_isenable."&sdt_isenable=".$sdt_isenable."&output=".$output."&rmx_no=".$rmx_no;
		 	$restapi_object = new restapi();
		 	$table_version_resp =$restapi_object->callAPI("POST",$hdr,$url_table_version,$data_table_version);
		 	$table_version_decoded = json_decode($table_version_resp ,true);

		 	if($table_version_resp == false || $table_version_decoded['error'] == true)
	 	      {
	 		    $this->response->setOutput(1);
	 	      }
	  
	 	    $this->response->setOutput(0);
	}
   function set_pmt_alarm()
	 {
       $Pmt_alarm = $this->request->get['Pmt_alarm'];
	   $input = $this->request->get['input'];
	   $progNum = $this->request->get['progNum'];
	   $rmx_no = $this->request->get['rmx_no'];

	        $url_pmt_alarm = "http://".RMX_IP."/setPmtAlarm";      
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
		 	$data_pmt_alarm="programNumber=".$progNum."&alarm=".$Pmt_alarm."&input=".$input."&rmx_no=".$rmx_no;
		 	$restapi_object = new restapi();
		 	$pmt_alarm_resp =$restapi_object->callAPI("POST",$hdr,$url_pmt_alarm,$data_pmt_alarm);
            $pmt_alarm_decoded = json_decode($pmt_alarm_resp ,true);
            
		 	if($pmt_alarm_resp == false || $pmt_alarm_decoded['error'] == true)
	 	      {
	 		    $this->response->setOutput(1);
	 	      }
	 	    
                 $this->load->model('common/dashboardchannels');
		         $this->model_common_dashboardchannels->pmt_alarm($progNum,$input,$Pmt_alarm); 
		         $this->response->setOutput(0);
	 	  
	 	       
	    }
	 function set_high_priority()
	 {
	   $Priority_checkbox = $this->request->get['Priority_checkbox'];
	   $input = $this->request->get['input'];
	   $program_number = $this->request->get['program_number'];
	   $rmx_no = $this->request->get['rmx_no'];

	        $url_high_priority = "http://".RMX_IP."/setHighPriorityServices";      
		 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
		 	$data_high_priority="programNumber=".$program_number."&input=".$input."&rmx_no=".$rmx_no;
		 	$restapi_object = new restapi();
		 	$high_priority_resp =$restapi_object->callAPI("POST",$hdr,$url_high_priority,$data_high_priority);
            $high_priority_decoded = json_decode($high_priority_resp ,true);
		 	if($high_priority_resp == false || $high_priority_decoded['error'] == true)
	 	      {
	 		    $this->response->setOutput(1);
	 	      }
	 	    
                 $this->load->model('common/dashboardchannels');
		         $this->model_common_dashboardchannels->high_priority($Priority_checkbox,$input,$program_number); 
		         $this->response->setOutput(0);

	 }
	 	    
function getFrequencies()
          {
          	 $no_of_output = $this->request->get['no_of_output'];
	         $ifrequency = $this->request->get['basefrequency'];
	         $Qam_ID = $this->request->get['Qam_ID'];


			$frequencies=array();
			$wings = $no_of_output/2;
			$frequencies[$wings-1] = $ifrequency;
			$count =$wings-1;
			for ($i=0; $i < $wings-1; $i++) { 
				$diff = $count * 8;
				$frequencies[$i]	= $ifrequency - $diff;  
				$count --;
			}
			$count =1;
			for ($i=$wings; $i < $no_of_output; $i++) { 
				$diff = $count * 8;
				$frequencies[$i]	= $ifrequency + $diff;  
				$count ++;
			}

			    $qam_frequencies=json_encode($frequencies);

				$this->load->model('common/dashboardchannels');
				for($i=0;$i<$no_of_output;$i++)
				{

					$this->model_common_dashboardchannels->FreqUpdate($frequencies[$i],$Qam_ID,$i);
				}
		        

				$this->response->setOutput($qam_frequencies);
		}
 /************************************************************************
				TUNER FUNCTIONS
 ************************************************************************/
 function tuneToFrequency()           //to delete channel from output
  {
	$tunerId = $this->request->get['tunerId'];
	$demodId = $this->request->get['demodId'];
	$lnbId = $this->request->get['lnbId'];
	$standerd = $this->request->get['standerd'];
	$frequency = $this->request->get['frequency'];
	$rate = $this->request->get['rate'];
	$modulation = $this->request->get['modulation'];
	$fec = $this->request->get['fec'];
	$rolloff = $this->request->get['rolloff'];
	$pilots = $this->request->get['pilots'];
	$spectrumInverted = $this->request->get['spectrumInverted'];
	$scramblingIndex = $this->request->get['scramblingIndex'];
	$searchRange = $this->request->get['searchRange'];
    

    $url_set_demod = "http://".RMX_IP."/setDemodMxl";      
 	$hdr = array('Content-Type: application/x-www-form-urlencoded');
 	$data_set_demod="tunerId=".$tunerId."&demodId=".$demodId."&lnbId=".$lnbId."&standerd=".$standerd."frequency=".$frequency."&rate=".$rate."&modulation=".$modulation."&fec=".$fec."&rolloff=".$rolloff."pilots=".$pilots."&spectrumInverted=".$spectrumInverted."&scramblingIndex=".$scramblingIndex."&searchRange=".$searchRange;
 	$restapi_object = new restapi();
 	$set_demod_resp =$restapi_object->callAPI("POST",$hdr,$url_set_demod,$data_set_demod);
    $set_demod_decoded = json_decode($set_demod_resp,true);
    
 	if($set_demod_resp == false || $set_demod_decoded['error'] == true)
	      {
		    $this->response->setOutput(-1);
	      }

	 else{
	 	    $this->load->model('common/dashboardchannels');
	        $this->model_common_dashboardchannels->tuneToFrequency($tunerId,$demodId,$lnbId,$standerd,$frequency,$rate,$modulation,$fec,$rolloff,$pilots,$spectrumInverted,$scramblingIndex,$searchRange);

	        $url_get_demod = "http://".RMX_IP."/getDemodMxl";
			$data_get_demod="mxl_id=".$mxl_id."&rmx_id=".$rmx_id;
			$get_demod_resp =$restapi_object->callAPI("POST",$hdr,$url_get_demod,$data_get_demod);
			$get_demod_decoded = json_decode($get_demod_resp,true);

			if($get_demod_resp == false || $get_demod_decoded['error'] == true)
		      {
			    $this->response->setOutput(1);
		      }
		        $this->response->setOutput(0);    
	    }     
  }
	  
}
